package certs

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _certs_client0_crt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x56\x47\x6f\xeb\x48\xb3\xdd\xeb\x57\x10\xdf\x6a\x06\xc6\x83\xd9\xcc\x2c\x60\x16\xcd\xa0\x1c\x4c\x65\x69\xc7\xd0\xa4\xa8\x2c\x8a\x92\x2c\xff\xfa\x57\x45\xcf\xf8\xea\x8e\xe5\xf7\x80\x8f\xb8\xd7\xa0\x9a\xdd\x15\x4e\x55\x9d\xd3\xae\x28\xca\x3c\xcd\xe3\xb0\x14\x50\x93\xf0\xf1\xc2\x32\xfc\x7c\xa3\x67\x2a\x8a\x73\x7e\xd8\x83\xa4\x4a\x7f\xc8\xef\xca\x9f\x5f\x1f\x46\xa2\xc8\xc3\xad\xd4\xbf\xec\x22\x51\x80\xc4\xe8\x33\x7b\xf8\x9c\x67\xfb\xb0\xbc\x14\x42\xe2\xdb\xec\x50\xe4\xe5\x6a\x07\xd2\x79\x15\x2a\xba\x31\xc3\x1f\xc3\x11\xf7\xf7\x71\x71\x3f\x96\x68\xfc\xeb\x50\xeb\x7c\xbe\x90\x31\xb7\xff\xd7\x7f\xfc\xf7\x70\x77\xdc\x0a\xc9\xe5\xff\xf9\x15\x4c\xb8\xcd\x93\xbc\xbc\x7f\x2d\xd0\xd3\x3f\x94\x92\x23\xd2\x43\x21\x00\xdf\xaf\x12\x93\x25\x59\x01\xdd\x02\xcd\x90\x14\x99\x69\x52\xa3\x37\xfe\x76\x80\xa7\xa5\x28\xa4\xcf\x03\x92\xf9\x78\x40\xf9\xfd\xc0\xe8\x12\xad\x45\x5c\x56\x31\xc5\xdb\x5c\xec\x4b\xf9\xdf\xdf\xa4\xb7\x4b\xb4\xcd\x63\xa9\x23\xee\x52\x6b\x9f\x1e\xe0\x37\x6f\x0f\x1f\x1f\x90\x28\xce\xe1\x93\xfc\xe9\x41\x64\x1e\xce\x80\xf4\x87\x22\x6b\x96\x14\xe5\xe5\x9f\xbf\x6d\xa3\xa7\x77\x48\x2e\xdb\xcb\xf9\x61\x0b\x7c\xdb\x43\x8f\x2c\x83\xb0\xc0\xd0\xe8\x6f\x62\x40\xa8\x41\xac\x01\x0b\xc1\xb6\x21\x12\x90\xaa\xa0\x6a\xa0\x87\x90\x44\x90\x28\x3f\x58\x48\x20\x49\xc1\x8a\x40\x41\x94\x42\x08\x55\x30\x62\x5a\xb1\x75\x08\x13\x08\x05\xe0\x06\x53\x05\xa6\x80\xa2\x3f\xb7\x90\x26\x20\x12\x48\x05\x58\x36\x58\x09\xa8\xe8\x0e\x83\xd1\xc1\x0a\x29\x24\xc3\x02\x15\x8f\x0b\x88\x15\x0a\xef\xa9\x05\x25\xa5\xfd\x66\x0a\x98\x0e\xba\x13\x0c\x2c\x05\x6c\x0b\x6c\x06\x3a\xfa\x35\x40\xc1\x45\x34\xae\xd2\xcb\x53\x0b\x66\x15\x27\xab\xc2\x4e\x71\xbf\x09\xa9\x02\x66\x08\x9a\x49\x7e\x4d\x03\x04\xbe\x63\x0c\x2a\xe8\xe2\xb9\x05\xd5\x22\xa0\x30\x7e\x8c\x01\xe3\x34\x2d\xda\xaf\x9b\xa0\x1a\x90\x84\x64\x8a\xec\x28\x20\x0b\x50\xe4\xe7\x16\x30\x6b\x0d\x73\x34\x40\x8f\xc0\xc0\xfd\x06\xd8\x32\xa8\x09\xa1\x8a\x2b\xb2\x0a\xa1\x0d\x31\x46\xa8\x52\x54\x4f\x2d\x44\x58\x47\x1d\x34\xac\x1a\x66\x91\x90\x05\x21\x53\x3a\x69\x44\xb9\xe3\xcf\x28\x04\x99\x51\x6a\xd1\x0f\x38\x24\x26\x24\x1a\xa1\x8d\x07\x85\x0a\xc2\xa0\x12\x10\x14\x1a\xc8\x1a\xf9\xc5\x34\x35\x44\xdb\x26\x47\xcf\xab\x99\x52\x27\x60\xdb\x18\x29\xe8\x29\xa4\x21\x79\x47\x1c\x22\x99\xc0\x11\x02\xcc\x88\x8c\xa8\x36\xe8\x3f\x54\x53\xc5\x22\x22\x62\x36\x18\x09\xe8\x98\x45\x4c\xfd\x80\x00\xa6\x68\x33\x22\xd7\xb6\x01\xcc\x06\xd9\x80\xf8\x87\x18\x22\x13\x42\x0b\x52\x56\xc5\x9f\x92\x35\x51\x41\x61\xe8\x04\x6c\x22\xe8\xb8\x1d\x53\x21\xb0\xb5\x9e\x5a\xb0\x31\x80\x18\xc2\x14\xb4\x2a\x5a\xcc\x02\x7d\x61\x6f\x6b\x09\x25\x8e\xf5\x8d\x22\x88\x10\x04\x93\xba\xeb\xf9\x5c\x54\x53\x83\x88\xe1\x70\x61\x0f\xe0\x66\xb4\x80\x30\xa2\x41\x25\xa4\x26\x57\x14\x30\x0c\xf2\x62\xb0\xe7\x16\x0c\x93\x76\xe2\xe0\xa0\x17\xac\x1a\x46\x8b\x85\x90\x71\x11\x41\x30\x81\x21\x9e\x26\xa1\x14\x2a\xa0\xd9\x3f\x54\x93\x51\xef\xb1\xa4\x9a\xcd\x98\x5c\x33\x1d\x54\x3c\x6b\xd0\x6c\x22\x92\x0a\x4e\xb7\x4d\xad\x12\x85\xcf\x2d\xc4\x26\x08\x8d\x86\x02\xd3\x44\x3c\x63\x9b\xa2\x95\x63\x1a\x2b\x34\xc8\x34\xea\x67\x84\x05\x63\xd3\x7e\xa8\xa6\x50\x20\x66\xdf\xbe\xf8\xef\xc7\xc3\x1e\x19\x13\x24\x43\xd7\x55\xb3\x52\x08\x59\x96\x1f\x54\x62\xae\xcb\xf6\x55\x95\xc4\x7b\x29\xf6\x24\x33\xe7\xdf\xcd\xff\xfd\xd9\x09\xcf\xc8\x86\x2e\x7e\x2e\x8b\x30\xdf\x97\x67\x90\xbe\xf9\x72\x39\xd4\x79\x77\xe4\x3f\x3b\xff\x0f\x4f\x57\x04\x9d\x60\x40\xa8\x77\x24\x33\xdf\x8c\x70\x97\x6a\xa9\x31\xe0\x32\x38\x0a\xd4\x75\xd0\xb1\x00\x3e\x18\x3e\x30\xb4\x8f\x9d\xe1\x83\xc3\xa9\x3c\xb8\xa2\x39\xc0\xeb\xe0\x20\x8f\x78\x60\x28\xcf\xfc\xf2\x4b\xb9\x22\xc2\xbf\xff\xff\x9e\x37\xe2\x9e\x57\x14\x8a\x9e\x35\x19\xea\x1a\x28\xac\xaa\x88\x4d\x2c\x2d\x7b\xd4\x48\xa6\x09\xae\x4a\x25\xb0\x3d\xf0\x0c\x70\x7c\xf0\xb1\x52\x32\x85\x60\xc8\xdf\x2c\x7a\x79\xd1\x0f\x77\x02\x5e\x7f\x12\xd3\x7f\x9e\x73\x25\xe4\xe0\x79\xc0\xea\x20\x73\x62\x70\xe6\x13\x8b\x31\x0b\xb3\xae\x3d\x4b\xcc\xa7\x7a\x25\x22\xa9\xf2\x9a\x9c\xc3\x4c\x3c\x49\x69\xdc\x1d\x49\x33\x11\x49\x6e\xa5\x9a\x15\x18\x04\x00\x5e\x34\xfe\x2d\x79\x7f\x5b\xfd\xbf\x8c\x79\x79\x96\x97\x78\xdd\xf8\xba\x56\x54\x3b\xfe\xab\x4b\x06\xc2\x8b\xe4\x86\x84\x89\x94\x8b\xd3\xa1\x62\xa2\x26\xd1\x17\xb2\x99\x86\xc3\x2b\x43\xa4\x12\x1b\x28\x2a\x8d\x5e\x58\x21\x6c\x3e\xb4\x3d\x12\xac\xc5\xe8\xb8\xae\xd3\xbc\x63\xb3\xc8\x9f\x74\xa7\xd0\xbb\x61\x13\x25\x26\x09\x4d\x10\xce\x11\x5e\x2a\x70\x3c\xcd\x07\x2d\x40\xf2\x47\x71\x61\x31\xd8\x0a\xa4\x16\xbd\x87\x28\x28\x82\xa4\x0d\xa7\x18\xd9\x00\xaf\x22\x6a\x4a\x1c\x88\xe4\xa9\x56\xc4\x82\x0c\xf3\x75\x1c\xa7\x18\x85\xdb\x32\x88\x1c\x44\x44\x0c\x63\xc9\xc4\x1b\x76\x4a\x67\x91\x6a\x70\xbf\xce\x28\x00\x35\x26\x32\xb4\x62\xa2\x8e\xaf\xe3\x28\x34\x9f\x22\x85\x34\x85\x52\x88\x59\x44\xb8\x01\x19\x06\x6b\xae\x02\xea\x23\xa6\x80\xc6\x11\x1f\x0c\x0f\xd3\x44\x75\x88\x1e\xa4\x50\xaf\x28\x91\xce\xa2\x76\xc4\xc4\xdb\x29\xf6\xa7\x46\x2a\x8c\x10\x85\x15\x15\x23\x73\xa2\x0c\x19\x28\x8b\x2a\x45\xa5\x3f\x70\x0e\xba\x40\xb2\xc5\x80\x51\x67\x2d\x54\xcf\xa4\xda\x86\x3a\xa5\x13\x02\x98\xb5\x48\xe9\x2f\xa6\x86\x7b\x08\xb7\x84\xc4\xe5\xeb\x38\x12\xbb\xca\x68\x0f\xce\x68\x94\x92\x8e\x63\xa5\xb0\x82\x28\x04\xa8\x1a\xb8\x8e\xba\x83\x84\x89\xa2\x8c\xf1\x60\x8e\xe8\x45\x7e\xd0\x50\xca\x5a\x90\x70\x13\xed\xeb\x44\x74\xa4\xda\x0a\xdd\x16\x90\x6c\xb1\xac\xf8\x4f\xaf\x1a\x23\x35\xe9\x52\x84\xc5\x45\xde\xfe\x3a\x4e\x72\x83\x8c\x1a\x57\xf9\x6a\x84\x12\xce\x63\x64\x90\xd6\xa0\x5e\x60\x48\x48\x98\xe8\x0e\x8b\x48\x98\x24\x54\xf4\x47\xe4\x89\x48\x05\x95\x12\x25\xde\xaa\x70\xc3\x60\x70\x96\xb1\x4c\xa8\xb9\xe9\x27\x4b\xa7\xd5\xdd\x03\xab\x89\x9a\x52\xdd\x10\x7e\x21\x8f\x80\x60\xb2\x31\x25\x8b\xee\x70\x3a\x49\x34\x35\xba\x4d\x91\x5e\x58\x44\xfe\x18\x1b\x82\x80\xa6\xb0\xc4\x58\x29\xfb\x41\xb3\x10\x64\x94\x2a\x4c\x0a\xa9\xde\xae\x8e\xe0\x4d\x89\xe4\xbe\x6a\x36\x54\xed\xa8\xea\x43\x54\x61\xec\x1f\x4c\x13\x39\xdf\x7e\x28\x1c\x4a\x33\x86\xad\x54\x79\x21\x2c\x8c\x11\x37\x60\x3c\x98\x23\x86\xfd\x39\x47\x58\x7a\x6a\x66\xbd\x2a\x31\x23\xe2\xfc\xd5\x75\x1a\x41\x8a\x9d\x63\xa4\xb5\xff\xa1\xc7\xf1\x1b\xad\xbe\xe4\xfa\xc3\x71\xab\xde\x72\xf9\xd8\xaf\x56\x6b\xbd\x56\xcb\x7b\x1b\xbb\x2e\xcf\x67\x19\xbf\xb5\x1c\x9e\xe1\xff\x31\xef\x3b\xd9\xe6\xb4\xda\xe4\x0d\xfb\x26\x3b\x3c\x38\xd7\xb9\xc7\xe7\xbd\xe1\xe4\xe6\xdf\x16\xde\x34\x08\x3c\x8f\xdf\xf2\xe1\x7c\xb5\xaa\x45\x73\xe7\xbc\x1c\x39\x5e\x30\x6a\xdd\x9a\xab\xb8\xdf\x1b\x07\xef\xbd\xb1\x7f\xeb\x79\x2d\x36\xf0\x02\x65\x46\x6b\x6b\x5a\xe3\xea\xd7\xda\x9a\x8f\x7a\x43\x7e\xf3\xb2\x85\x57\xfb\xb4\x96\xac\xa3\xc6\x76\x1b\xed\x83\x1b\x46\xe4\xb4\xd6\xff\x8e\xc0\xaf\x73\x3e\x70\x79\x60\x71\xfa\xee\x66\x1d\x7c\xf7\xb9\xd1\x18\x1f\x6a\xec\x34\xf6\x1b\xc7\xdd\x8b\xf5\x31\x0c\x15\xbb\xd5\x57\xb5\xf3\x61\x74\xea\x9f\x55\x7d\x56\x16\x19\xfb\xf0\xf3\xb9\x6d\xa6\x46\x7b\x3d\x2e\x16\x6c\x51\xcc\x42\xaf\x27\x6e\xa7\xe0\xca\xe6\x16\xf7\x44\xc3\xad\xed\xda\xf5\x51\x3b\x57\x8f\xd9\x9d\xbd\x78\xc3\x97\xa9\x9d\xa7\x77\xb1\x49\xdd\xe4\x72\x1c\xdc\x98\xa6\xcd\x0e\x32\x3f\x36\x57\x83\xe9\x47\x14\x8a\x73\xfb\xee\xe5\xde\x22\x38\x2d\xa3\xf0\x1c\x06\x6f\x93\x63\x54\xe3\xc6\xfe\x6d\x23\x0b\x59\x9f\xf4\xd8\x6b\x1c\x65\xf6\xf5\xe2\xbd\x17\x07\xc7\x2a\xd4\x39\x73\xcc\x4c\x7b\x89\x66\xd6\x3e\xf0\x87\x1f\xab\x37\x45\xcc\x5f\x3b\xde\xf0\x3a\x7f\x2d\xcc\xa9\xe9\xf6\xcd\xfd\x59\xab\x0d\xa6\xc1\xcd\xdd\x6f\xcb\x79\xfc\xb1\x10\xd7\x61\xa1\x2c\x17\x4b\xe7\x3c\x53\x4f\x6f\xcd\x9d\x7a\x2b\x76\x5a\x63\x7a\x52\x57\xbb\xb8\xe5\x0d\xc2\xb4\x63\x77\x07\x6f\x45\xfd\x20\xab\xdb\x63\xf7\xa2\xeb\xf7\x45\xa7\xa6\xc8\xc9\xa6\x5f\xec\xeb\x89\x7f\x3e\x0d\xf2\xf6\x2e\x6d\xd4\xf7\x9d\x55\x77\xcf\x47\xde\xdd\xb9\x5f\xe7\x7e\x2b\xd1\x0f\x9b\xfd\x50\x59\xc9\x87\xb1\x7f\x9e\xf6\xdf\xc3\x52\x19\x0d\x97\xaf\x51\xd1\xd4\xdb\x93\x5d\xcd\x8a\xb7\x2b\xaf\xde\xee\xd5\xb9\xb1\x6e\xf9\xe3\xfc\x16\xb4\x3c\x1e\x70\xe7\xa0\x35\x16\xbd\x56\x63\xda\xe3\x9b\x06\x67\x93\xc4\xbf\x05\x6e\x8f\xf3\x5b\x33\xc0\x3e\x18\xca\x03\xc7\x59\xf8\xf5\xce\x7b\xb3\x16\x84\xee\xdd\x9e\xba\x83\x68\x55\x7c\x8c\x8b\x43\x33\xda\x5c\xae\x65\xce\xf2\x9e\x1f\x57\x07\x5b\xb7\x21\xef\x79\x06\xaf\x37\x07\x59\xf0\x16\xac\xb6\xa3\xdd\xd2\x1b\xb5\xd5\x9b\x3c\x4a\x58\x61\x1e\x6b\x8b\xee\x32\x3b\x0c\x2f\x9b\xc6\xf8\x79\xa7\xfd\x6a\xb4\x8e\xeb\x06\x5e\xd2\xbc\x1d\xb6\xcd\x7d\x6b\xd1\x58\xf3\xb1\x93\xf5\xa7\xb5\xe6\x68\xe2\xe3\xee\x8e\x93\x65\x85\x93\xf9\x75\x27\x88\x3d\xbe\xe6\x5d\xfa\xd8\x0c\x2c\xdf\xe1\x3d\xd7\xd1\xb0\xeb\x82\x45\xbb\x73\x58\xb6\x56\xd7\xb8\x8f\x4d\xd4\x75\x02\xee\x65\x99\xef\xd4\xb8\xef\xbc\xd9\x9b\x62\xd9\x5b\xa5\x66\xdf\x9f\xde\xce\x1f\xd9\x7a\x65\x6c\xb3\xa4\x17\x3a\xf6\x76\xa6\x07\x81\x6e\xf6\x36\xf5\x63\x64\xb3\xd5\x7d\xba\x1e\xc6\x7e\x5b\x34\xdb\x5d\x6d\x7e\x3a\x0d\x58\x72\xdc\xd7\xf8\xda\x2e\x06\xe3\x64\xa3\xbc\xca\xe1\xaa\x4c\x8b\xc1\x81\x3b\x7b\x25\xd9\x2d\xeb\xcd\xe4\x6d\xe0\xf6\x0e\x6b\x66\xdc\xce\x93\xbe\x5d\xdc\xf7\xc9\xb0\xff\x12\x2c\x96\x6f\x9b\x43\x73\x7d\xdd\x8e\xcc\xf7\xc0\x3c\xd7\xe6\xe9\x6e\xb2\x6b\x8e\x56\xfa\x65\xe6\x45\xdb\x41\x3a\x5b\x0d\xae\xd9\xe0\xe4\xa7\x33\x7d\x54\x2e\xb4\x57\xf3\xe3\x75\x9e\xf5\xeb\xf6\x5c\x99\xbc\x9b\xb2\x78\x6d\x9a\x6f\xcb\xf2\x75\x7c\x35\x57\x8e\xb6\xeb\x75\x4f\x35\xc7\xea\x0e\x78\xfb\xc8\xac\x71\x34\xea\x8e\xae\x8d\xf7\xed\xab\x62\xbf\x0e\xf4\xb4\x2b\x76\x45\x7b\x34\x59\xed\x85\x12\x6e\x58\xd3\xe3\x69\xf8\xb2\x64\xb7\xc3\xe6\x26\x94\xdb\xa0\xff\x12\xeb\xfe\x1b\x1f\xeb\xb5\x76\xfd\xd5\x9b\x2c\xcb\xc6\x8c\x79\x63\xb5\x9b\xf4\xe3\xad\xea\xe7\x69\xab\xd5\xe9\x7c\x5c\x5f\xe6\xc7\xc9\x76\xdb\xea\x58\x96\x58\x5a\x97\xad\xcc\xd7\x2f\xb7\xeb\xa9\xe8\x2d\x3b\x8b\xc9\xae\xcc\xbc\xce\x52\xd1\x6b\xfe\x70\x3d\x8e\xdd\x61\x47\x11\x4b\x71\x0c\x5f\x9c\x09\xda\xb9\x28\xd6\x5f\x9f\x2c\xe4\xf7\xbd\xef\x1c\xf4\xbf\x01\x00\x00\xff\xff\x30\xd5\xca\x84\x0f\x11\x00\x00")

func certs_client0_crt_bytes() ([]byte, error) {
	return bindata_read(
		_certs_client0_crt,
		"certs/client0.crt",
	)
}

func certs_client0_crt() (*asset, error) {
	bytes, err := certs_client0_crt_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "certs/client0.crt", size: 4367, mode: os.FileMode(384), modTime: time.Unix(1415590136, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _certs_client0_key = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x95\xb7\xd2\x83\x5a\xb2\x46\x73\x9e\xe2\xe4\xd4\x2d\xbc\x40\xc1\x0d\xf6\xc6\x69\xe3\x41\x18\x89\x0c\x27\x9c\xf0\x20\xcc\xd3\xcf\x3f\x27\x9e\x4e\xbb\x83\xaf\x56\x77\xd7\xfa\xbf\xff\x16\x94\x55\x64\xfd\xe3\x3d\xc1\x3f\x8e\x87\x42\xe0\xcb\xff\xe8\xf2\xfb\xdf\x0e\x66\x22\x24\x0f\x25\x82\x00\xe8\x22\x70\x65\x70\x53\xfd\x81\x9a\x7c\x59\x1d\x3b\x5c\xb8\xbc\x84\xbe\x23\x8b\x61\x97\xe1\x39\x59\x0b\xc3\x45\xeb\x5c\x52\x97\x5c\xbf\xee\xfc\xe7\xa6\x35\xfe\xfc\xc6\xa8\xf7\x1c\x25\x92\x59\xec\x93\xfb\xa3\x5e\x02\x90\x0a\x55\xec\x34\xe5\xa9\xd5\xcc\x58\x9e\x14\x2e\x79\x78\x78\xaf\x3f\x67\xd1\x7e\xc4\x7c\x1b\xed\x9d\x62\xd9\x68\x20\xc1\xf8\xa8\xec\xf0\x4a\x13\xac\x58\xb4\x53\xaa\xa5\xb7\x3b\xc5\x69\xb2\x24\xae\x13\x8c\x29\xb8\xf5\x4e\x4b\x16\x24\x17\x98\x14\x91\xa5\xe5\xfd\xb7\x49\xc7\x3c\x40\x61\x66\x5e\x14\xe4\x4b\x16\x4f\x23\xa1\x77\x65\xef\xaa\x1c\x8c\x2e\x5e\x84\x2e\x79\xbf\x17\x31\xf3\x21\x2f\x5a\x7c\xbf\xb0\x76\xe8\xee\x62\xff\x5d\x5f\xd9\xf5\x2e\x7e\xde\x4c\xc7\xef\x18\x2e\x11\x33\x39\x8f\x8e\xd9\xe7\x8e\x55\xc3\x89\xa9\xba\x0c\x49\x76\x82\x7d\xf4\xbb\x61\x3b\xb3\x32\x90\xcc\x77\x34\x36\x8e\x3b\xdf\x3a\x4d\xe6\xad\x35\xf7\x4a\x2e\x2f\x93\x5d\x6b\xdd\x47\x55\x7a\xbd\x32\x7a\xf0\x94\x4e\x78\xfe\x5e\x32\xca\xb9\xa1\xed\x3d\xba\x22\x07\xcc\x97\x97\xd0\x3a\x92\x95\x7e\x7a\x31\x91\xce\x0f\x4e\x0b\x3a\x21\xfb\x56\x92\xa2\x99\x0a\xb8\x35\x48\xf6\xeb\xdd\x45\x12\x70\x01\x04\xc3\x1f\x6c\xc9\x5a\x8b\x30\x2c\xb6\xdd\x94\x70\xf7\x32\x30\xa9\x39\xac\x87\x69\x44\x65\x26\x27\x33\x85\x08\xaf\x33\x63\xd5\x6a\x76\x3f\xf2\x86\x7a\x1e\x42\x6f\xbe\x6a\x9e\x8b\xb8\xf6\x3b\x3c\xff\xe0\x17\x4d\x4f\x4b\xdc\xb3\x5b\xb4\xa3\xd1\xe8\x86\x5d\xb0\x27\x74\xbc\x58\xcb\x1f\x5b\x8e\xae\xf1\xf9\xe6\xe6\x7c\xdc\x2d\x65\xcc\x1b\xe1\x11\xd2\x59\x15\x3e\x24\x4e\x7e\xb1\x59\xc1\x70\x17\x72\xd3\x53\x88\xbe\xed\x97\x6b\x3d\xd5\xb3\xab\x94\xfe\x51\x16\xe6\x85\x23\xbd\x30\x7b\x30\xae\x0f\x54\x7e\x7e\x19\xe7\x2b\xa6\x00\xba\x0f\x72\xf6\x12\xf5\xc1\xc2\xf2\x28\x2d\x1f\xa9\xd6\x8d\xf2\xf9\x5e\xe1\xe5\x6f\x0e\xa5\x0b\x43\x4e\x0c\x84\x18\x08\xe7\x85\x1d\x9c\x06\x6f\xf3\x9a\x13\xf9\x62\xa0\x24\x6f\xd9\x37\x61\x15\x80\x54\x6d\x93\x4d\x67\xca\xf1\x52\x45\x13\xec\x98\x86\xd4\xb2\xce\x73\xf6\x55\x3b\x31\xfa\xe8\xca\x61\x43\xe3\x7c\x04\xc6\x8a\x63\xc1\xf7\x0a\xdc\xb6\x9e\x35\x3c\x70\xd5\xee\x74\xd8\xf0\xb0\x79\xff\x6a\xcf\x5b\xd7\x91\x97\x1a\x8c\x59\x3a\x12\x5a\xa5\xed\xb1\x03\x9a\xf6\xda\x39\x1b\xdd\x3a\x67\xfd\x6e\x63\x3b\xc7\xb0\x75\xb1\x40\xa2\x3a\x4a\x20\xc5\xf2\x2d\x03\xe2\xfd\xb7\xce\x24\xbc\xa5\xf8\x4e\x18\x02\xce\xcd\x5e\xd3\xf1\x3c\x79\x29\xed\x8b\x9f\x98\xa9\xe3\xc7\xb7\xca\xf9\xb6\xc2\x3b\x2d\x38\x5b\x85\x6f\x6e\x6f\x07\x23\xf9\x0f\x80\xb2\xbf\xda\x44\xb2\xb6\xac\xd7\xe4\xcf\x72\x35\xcd\xc4\xc4\x67\x1f\x59\x65\xdd\xe0\x2c\x92\xf1\xcb\xe1\x0e\xe9\x94\x57\xda\xe0\xee\xbe\xa8\x67\xb4\x70\x77\xa8\x36\x13\x55\xb3\xc0\xa4\x40\xb7\x68\x27\xc4\xb3\xf7\x41\x06\x46\x63\x30\xb7\x3a\xe8\xc6\x0d\x8f\xab\x09\x26\x4d\x27\x8f\x4f\x90\xc0\xa9\x37\x72\xe0\xad\x55\x15\xc4\x6d\xd6\x20\xe6\x67\xfe\x9b\xf8\x36\x45\x3d\x16\xad\x13\x6d\x54\x1f\xc0\x09\x60\x83\x37\x6a\x08\xbc\xb7\x18\x90\xa5\xa3\x17\x17\x89\x3c\xa5\x31\x71\x3c\x3a\x29\xb4\xdc\x2f\x6b\x12\xcc\x80\xa9\x16\x22\xd0\x42\xc2\xbb\x37\x67\x01\xee\xbd\x80\x65\xeb\x7a\x1c\xd5\x95\xeb\xa7\x04\x60\xf0\xe2\x5f\xcb\xd8\xe0\x7d\x32\x8d\xd9\x9d\x0c\xa4\x29\x49\xbc\xf5\x25\xfe\x9c\x81\x8c\x6f\xb7\x98\x83\x7a\x42\xc2\xb9\xa0\xd5\xa3\x03\x48\xb1\x21\xa3\x60\xdb\xab\x37\x52\xb8\xaf\x61\x6d\xcf\xec\xc0\x8c\xf9\x07\x52\x47\xad\xdb\x6c\xd8\x4c\xb2\x7a\xd6\xf7\xc3\x77\x8d\xc7\xf2\x17\x19\x70\xb8\xfd\xf6\x3e\x36\x63\x0b\xdc\x65\x88\xd6\x72\x6e\x95\x33\x63\xe4\xc5\x02\xcd\x8c\xfd\xbd\x99\x2e\xdd\xa9\xf7\x31\xf1\xe4\x95\x48\x98\xa7\xf2\x83\x3e\xcf\xb6\x4b\x36\xb4\xbc\xa0\x9e\x67\x50\x58\xa2\x6a\xc5\xef\x97\x95\x9e\xc6\x38\x56\x46\x12\xcd\x72\x9b\x60\x19\x61\xc1\xc1\x71\x54\x9d\xf0\x50\xdf\x7e\x78\xd1\x5f\x1d\x70\x5b\xdb\x3c\xd5\x03\x4b\xa1\xbf\x1b\xca\x50\x9d\x2a\xc2\x72\xf4\x5e\x7a\xe1\x5d\x75\x1d\x69\x90\x2c\x53\xc4\x2c\x5f\x8a\x9f\xef\xd8\x34\xc5\xc3\x99\x80\xa5\x2e\xa6\xaf\xbc\xb9\x22\xd9\x0b\x4d\xb9\xeb\xb0\x94\xa4\x48\x8d\xd2\x47\xda\x5b\x71\xda\xfa\xd6\xb2\xa4\xd1\x13\x7d\x5e\x94\xe5\xba\x25\x95\x6f\x7f\xcf\x07\xb4\x88\x86\xd8\x09\x6b\x4e\x4d\x75\xae\xb0\xe1\x35\xb1\x46\x9a\x0e\x0e\x4b\xbd\xd0\x19\x71\x52\x35\xa6\x72\x2d\xfe\x1d\x67\x53\xe0\x3e\x1e\x99\x9f\x6f\xdc\x09\xf7\x02\x49\xc8\x90\x0f\x4e\x5a\xb7\x7c\x7f\x72\x98\x49\x9c\xc6\x97\x54\xb4\x86\xd0\x6c\x29\x11\x02\x32\xe8\xc9\x81\xec\x1f\x6c\xce\x92\x0a\x9c\x37\xaf\x87\xde\xe5\x30\xa8\x5f\xa3\xd2\xe5\x78\x37\xf4\x0d\x67\xfe\x1b\xf1\x65\x7e\xbb\xc2\xfd\x87\x65\xa6\xe7\x81\x41\x05\xe2\x2b\x6b\xdd\xaa\xb7\x85\x7b\x23\xd6\xca\x0f\x57\xa7\xb1\x0e\x6a\x2a\x4f\x7d\xa4\xd3\x5e\x62\xc7\x5d\xb3\x41\x22\x1a\xd5\xbe\xec\x1d\x66\x2d\xe1\xb8\xd7\x8b\xb2\x50\xd8\x85\x82\x47\x57\x11\xfd\x2e\x91\x2e\x07\xd5\x8b\x71\xf5\xb3\x3f\x9f\x2a\x32\x61\x1a\x0d\xee\xe1\xfe\x38\x3f\xe9\x14\xe0\x3f\x14\x3c\x78\xac\x2a\xe7\x06\x88\x6d\xdc\x2a\x32\x9e\xdd\xf8\xdd\x6d\x6c\x69\x89\x8e\xd2\xba\x01\xdf\x78\x4a\x11\x60\x71\x99\xee\x5a\xf8\xc7\xd4\x14\x66\x7c\xac\xd2\x93\xfc\x8d\xc7\x72\xff\x82\x87\x90\x95\xb6\x4a\x7c\xd1\x00\xfe\x1f\xfb\x57\x29\xb2\x25\xfd\x6f\xd5\xfc\x27\x00\x00\xff\xff\x58\xe4\x8b\x8a\x8b\x06\x00\x00")

func certs_client0_key_bytes() ([]byte, error) {
	return bindata_read(
		_certs_client0_key,
		"certs/client0.key",
	)
}

func certs_client0_key() (*asset, error) {
	bytes, err := certs_client0_key_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "certs/client0.key", size: 1675, mode: os.FileMode(384), modTime: time.Unix(1415590155, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _certs_key_pem = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x91\xbd\x96\xa2\x30\x00\x85\x7b\x9e\x62\x7a\xce\x1e\x7e\x1c\x41\xca\x00\x01\x82\x0e\x88\x08\x18\x3b\x11\x08\x18\x41\xfe\x26\x18\xab\x7d\x88\x7d\xc2\x7d\x92\x9d\x99\x6a\xef\xb9\xc5\x3d\xf7\x2b\xbf\x5f\xdf\x31\xa1\x8b\x82\xb7\x7d\x62\xee\x90\xf5\xb6\x85\xf8\xe7\x14\x3e\x10\x32\xd1\x0d\x04\x26\xa1\x43\x4d\x1b\xd7\x58\x64\x13\x44\xd0\x01\x20\xb4\x40\xb4\x01\xdf\xdc\x22\xdb\xaf\x0d\x01\xf3\x82\x94\x57\xd0\xcf\xe8\x21\x4f\xa6\xd2\xa8\x77\x2e\x17\x20\x94\xc0\xb6\xcb\xa6\xe6\xd2\x72\x29\x2c\xae\x34\x30\x34\x98\x0d\x2f\x95\xe0\x6e\xb5\xa0\x4c\x11\x1b\x3e\x57\x3a\x5f\xd7\xd3\x6e\xbb\x2f\x34\x99\x00\x77\x75\x77\x33\x2d\x4f\x2f\xd4\x19\x63\xc1\xf0\x95\xb9\x64\x47\x14\x1f\xfb\x26\x64\xf1\x5c\xcc\x92\xe2\xd1\xb5\xd1\xfa\x2d\xd1\x68\x00\x14\xad\xbc\x61\x5d\xc1\xd5\x83\x3d\x72\x07\xd8\x31\x76\x75\xc7\x1b\xd7\x1f\xdc\x2a\x8d\x4a\x29\x05\xa6\x33\xfb\x15\x87\x6a\x18\x2d\x79\x1d\x15\xca\x99\xca\x38\x8c\x9a\x95\x27\x61\x06\x94\xe4\x72\x28\x18\x81\x53\x35\xf6\xea\x79\x5e\x8c\x67\x57\xd8\xef\x65\xf5\x62\xf9\xd5\xaf\xf6\xec\x53\xe5\x42\xc2\x78\x57\x77\x38\x0f\x81\xac\x70\x1d\xcf\x27\xdc\xcb\xd3\x22\x1a\x87\xf3\xdd\x6e\xfb\x92\xa3\xca\xf3\x44\x5f\xcd\x43\x35\x32\x35\xb1\xfc\xec\x9c\xf7\x27\x1f\x45\x3c\x8c\x69\xef\x6c\x08\x14\xcc\x29\x38\x9e\x68\x45\x9e\x69\x93\x81\x8b\xbc\x7a\x48\xbb\xf3\x1a\x1a\x9b\xd3\xa1\x6e\xa5\x53\x7a\x5f\x9c\x6c\x70\x70\x71\xf7\xdc\x87\x33\x5c\xc9\x26\x1c\xf7\xae\x67\x7d\x0c\x43\x79\x93\x27\xf4\xa4\x42\x12\x21\x1b\x44\xc0\x14\x7e\xa4\xc0\xc0\xfe\xcf\xd3\xdf\xdf\x7f\xbe\x2a\xfc\x0b\x00\x00\xff\xff\xd8\x0c\xef\xf3\xc4\x01\x00\x00")

func certs_key_pem_bytes() ([]byte, error) {
	return bindata_read(
		_certs_key_pem,
		"certs/key.pem",
	)
}

func certs_key_pem() (*asset, error) {
	bytes, err := certs_key_pem_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "certs/key.pem", size: 452, mode: os.FileMode(420), modTime: time.Unix(1421217871, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"certs/client0.crt": certs_client0_crt,
	"certs/client0.key": certs_client0_key,
	"certs/key.pem": certs_key_pem,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"certs": &_bintree_t{nil, map[string]*_bintree_t{
		"client0.crt": &_bintree_t{certs_client0_crt, map[string]*_bintree_t{
		}},
		"client0.key": &_bintree_t{certs_client0_key, map[string]*_bintree_t{
		}},
		"key.pem": &_bintree_t{certs_key_pem, map[string]*_bintree_t{
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

